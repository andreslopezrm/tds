{
  "version": 3,
  "sources": ["empty-module:~/db/tip.server", "browser-route-module:routes/dashboard/tips.tsx?browser", "../../../../app/routes/dashboard/tips.tsx", "../../../../app/components/tip-list.tsx", "../../../../app/components/tip-item.tsx", "../../../../app/components/tip-modal-create.tsx", "../../../../app/components/tip-modal-edit.tsx"],
  "sourcesContent": ["module.exports = {};", "export { default } from \"./routes/dashboard/tips.tsx\";", "import { getAuth } from \"@clerk/remix/ssr.server\";\nimport { ActionArgs, json, LoaderArgs, redirect } from \"@remix-run/node\";\nimport { Link, useActionData, useLoaderData, useTransition } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport DashHeader from \"~/components/dash-header\";\nimport LoadMore from \"~/components/load-more\";\nimport TipList from \"~/components/tip-list\";\nimport TipModalCreate from \"~/components/tip-modal-create\";\nimport { TipModalEdit } from \"~/components/tip-modal-edit\";\nimport Toast from \"~/components/toast\";\nimport { getallCategoriesByUser } from \"~/db/category.server\";\nimport { countAllTipsByUser, createTip, getAllTipsByUser, getTipsWithCategory, Tip } from \"~/db/tip.server\";\nimport { getQueryIntParameter } from \"~/utils/params.server\";\n\ntype IntentType = \"create\" | \"edit\" | \"delete\";\n\nexport async function loader({ request }: LoaderArgs) {\n    const { userId } = await getAuth(request);\n    \n    if(!userId) {\n        return redirect(\"/sign-up\");\n    }\n    const offset = getQueryIntParameter(request, \"offset\", 0);\n    const perPage = getQueryIntParameter(request, \"per_page\", 200); \n\n    const [total, plainTips, categories] = await Promise.all([ \n        countAllTipsByUser(userId), \n        getAllTipsByUser({ userId, offset, perPage }), \n        getallCategoriesByUser(userId) \n    ]);\n\n    const tips = getTipsWithCategory({ tips: plainTips, categories });\n    return json({ total, tips, categories, offset, perPage });\n}\n\nexport async function action({ request }: ActionArgs) {\n    const { userId } = await getAuth(request);\n\n    if(!userId) {\n        return redirect(\"/sign-up\");\n    }\n\n    const formData = await request.formData();\n    const intent = formData.get(\"intent\") as IntentType; \n    \n    if(intent === \"create\") {\n        const description = formData.get(\"description\") as string;\n        const categoryId = formData.get(\"categoryId\") as string;\n        console.log({ description })\n        const tip = await createTip({ userId, categoryId, description });\n        return json({ intent, tip });\n    } \n    // else if(intent === \"edit\") {\n    //     const name = formData.get(\"name\") as string;\n    //     const entityId = formData.get(\"entityId\") as string;\n    //     const category = await updateCategory({ entityId, userId, name });\n    //     return json({ intent, category });\n    // } else if(intent === \"delete\") {\n    //     const entityId = formData.get(\"entityId\") as string;\n    //     await deleteCategory(entityId);\n    // }\n    \n    return json({ intent });\n}\n\nexport default function DashboardTipsRoute(){\n\n    const { total, tips, categories, offset, perPage } = useLoaderData();\n    const data = useActionData();\n    const { state } = useTransition();\n    const isSubmiting = state === \"submitting\";\n\n    const [showCreateModal, setShowCreateModal] = useState<boolean>(false);\n    const [message, setMessage] = useState<string | null>();\n    const [tipEdit, setTipEdit] = useState<Tip | null>(null);\n    const [categoryDelelteId, setCategoryDeleteId] = useState<string | null>(null);\n\n    console.log(tips);\n    useEffect(() => {\n        if(data?.intent === \"create\" && data?.tip) {\n            setShowCreateModal(false);\n            setMessage(\"Create success\");\n        } \n        // else if(data?.intent === \"edit\" && data?.category) {\n        //     setCategoryEdit(null);\n        //     setMessage(\"Update success\");\n        // } else if(data?.intent === \"delete\") {\n        //     setCategoryDeleteId(null);\n        //     setMessage(\"Delete success\");\n        // }\n    }, [data]);\n    \n    return (\n        <div>\n            <DashHeader title=\"Tips\" />\n            <div className=\"mt-4\">\n                <button type=\"button\" onClick={() => setShowCreateModal(true)} className=\"text-sm font-bold underline\"> + New tip </button>\n            </div>\n            <TipList tips={tips} onSelect={setTipEdit} onDelete={setCategoryDeleteId} />\n            <LoadMore total={total} current={tips.length} path=\"/dashboard/tips\" offset={offset} perPage={perPage} />\n            {\n                showCreateModal ? (<TipModalCreate isSubmiting={isSubmiting} onClose={() => setShowCreateModal(false)} categories={categories} />) : null\n            }\n            {\n                tipEdit ? (<TipModalEdit isSubmiting={isSubmiting} onClose={() => setTipEdit(null)} tip={tipEdit} categories={categories} />) : null\n            }\n            {\n                message ? <Toast message={message} onClose={() => setMessage(null)} /> : null\n            }\n        </div>\n    )\n}", "import { Tip } from \"~/db/tip.server\";\nimport TipItem from \"./tip-item\";\n\ntype Props = {\n    tips: Tip[];\n    onSelect: (tip: Tip) => void;\n    onDelete: (entityId: string) => void;\n}\n\nexport default function TipList({ tips, onSelect, onDelete }: Props) {\n    return (\n        <div className=\"overflow-x-auto relative mt-6\">\n            <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n                <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\n                    <tr>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Description\n                        </th>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Category\n                        </th>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Actions\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tips.map(tip => <TipItem tip={tip} key={tip.entityId} onSelect={onSelect} onDelete={onDelete} />)}\n                </tbody>\n            </table>\n        </div>\n    );\n}", "import { Tip } from \"~/db/tip.server\";\n\ntype Props = {\n    tip: Tip;\n    onSelect: (tip: Tip) => void;\n    onDelete: (entityId: string) => void;\n}\n\nexport default function TipItem({ tip, onSelect, onDelete }: Props) {\n    const { entityId, description, category } = tip;\n    return (\n        <tr className=\"bg-white border-b\">\n            <th scope=\"row\" className=\"py-4 px-6 font-medium text-gray-900\">\n                <p>{ description }</p>\n            </th>\n            <td className=\"py-4 px-6\">\n                { category?.name }\n            </td>\n            <td className=\"py-4 px-6\">\n                <div className=\"inline-flex gap-2 text-black\">\n                    <button onClick={() => onSelect(tip)} className=\"underline hover:opacity-80\">Edit</button>\n                    <button onClick={() => onDelete(entityId)} className=\"hover:opacity-80\">Delete</button>\n                </div>\n            </td>\n        </tr>\n    );\n}", "import { Form } from \"@remix-run/react\";\nimport { Category } from \"~/db/category.server\";\nimport { Modal } from \"./modal\";\n\ntype Props = {\n    isSubmiting: boolean;\n    categories: Category[];\n    onClose: Function;\n}\n\nexport default function TipModalCreate({ isSubmiting, categories, onClose }: Props) {\n    return (\n        <Modal onClose={onClose}>\n            <Form method=\"post\" className=\"md:w-96\">\n                <div>\n                    <label htmlFor=\"categoryId\" className=\"block mb-2 text-sm font-medium text-gray-900\">Category</label>\n                    <select defaultValue={\"\"} id=\"categoryId\" name=\"categoryId\" className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\" required>\n                        <option value=\"\">Choose a category</option>\n                        {categories.map(({ entityId, name }) => (<option key={entityId} value={entityId}>{name}</option>))}\n                    </select>\n                </div>\n                <div className=\"mt-3\">\n                    <label htmlFor=\"description\" className=\"block mb-2 text-sm font-medium text-gray-900\">Name</label>\n                    <textarea id=\"description\" rows={5} name=\"description\" maxLength={245} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  block w-full p-2.5\" required />\n                </div>\n                <div className=\"flex justify-end gap-2 mt-5\">\n                    <button type=\"button\" disabled={isSubmiting} onClick={() => onClose()} className=\"text-gray-900 border-2 border-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center mr-2 mb-2 hover:opacity-80 disabled:opacity-50\">Cancel</button>\n                    <button type=\"submit\" disabled={isSubmiting} name=\"intent\" value=\"create\" className=\"text-white border-2 border-gray-800 bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 disabled:opacity-50\">\n                        Save {isSubmiting ? \"...\" : \"\"}\n                    </button>\n                </div>\n            </Form>\n        </Modal>\n    );\n}", "import { Form } from \"@remix-run/react\";\nimport { Category } from \"~/db/category.server\";\nimport { Tip } from \"~/db/tip.server\";\nimport { Modal } from \"./modal\";\n\ntype Props = {\n    tip: Tip;\n    isSubmiting: boolean;\n    categories: Category[];\n    onClose: Function;\n}\n\nexport function TipModalEdit({ tip, isSubmiting, categories, onClose }: Props) {\n    const { categoryId, description } = tip;\n    \n    return (\n        <Modal onClose={onClose}>\n                <Form method=\"post\" className=\"md:w-96\">\n                    <div>\n                        <label htmlFor=\"categoryId\" className=\"block mb-2 text-sm font-medium text-gray-900\">Category</label>\n                        <select defaultValue={categoryId} id=\"categoryId\" name=\"categoryId\" className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5\" required>\n                            <option value=\"\">Choose a category</option>\n                            {categories.map(({ entityId, name }) => (<option key={entityId} value={entityId} selected={entityId === categoryId}>{name}</option>))}\n                        </select>\n                    </div>\n                    <div className=\"mt-3\">\n                        <label htmlFor=\"description\" className=\"block mb-2 text-sm font-medium text-gray-900\">Name</label>\n                        <textarea id=\"description\" rows={5} name=\"description\" maxLength={245} defaultValue={description} className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  block w-full p-2.5\" required />\n                    </div>\n                    <div className=\"flex justify-end gap-2 mt-5\">\n                        <button type=\"button\" disabled={isSubmiting} onClick={() => onClose()} className=\"text-gray-900 border-2 border-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center mr-2 mb-2 hover:opacity-80 disabled:opacity-50\">Cancel</button>\n                        <button type=\"submit\" disabled={isSubmiting} name=\"intent\" value=\"create\" className=\"text-white border-2 border-gray-800 bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 disabled:opacity-50\">\n                            Save {isSubmiting ? \"...\" : \"\"}\n                        </button>\n                    </div>\n                </Form>\n        </Modal>\n    );\n}"],
  "mappings": "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",
  "names": []
}
