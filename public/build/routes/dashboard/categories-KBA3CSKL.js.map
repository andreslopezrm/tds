{
  "version": 3,
  "sources": ["empty-module:~/db/category.server", "browser-route-module:routes/dashboard/categories.tsx?browser", "../../../../app/routes/dashboard/categories.tsx", "../../../../app/components/category-list.tsx", "../../../../app/components/category-item.tsx", "../../../../app/components/category-modal-create.tsx", "../../../../app/components/modal.tsx", "../../../../app/components/category-modal-edit.tsx", "../../../../app/components/confirm-modal-delete.tsx", "../../../../app/components/toast.tsx"],
  "sourcesContent": ["module.exports = {};", "export { default } from \"./routes/dashboard/categories.tsx\";", "import { getAuth } from \"@clerk/remix/ssr.server\";\nimport { ActionArgs, json, LoaderArgs, redirect } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useTransition } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport CategoryList from \"~/components/category-list\";\nimport CategoryModalCreate from \"~/components/category-modal-create\";\nimport CategoryModalEdit from \"~/components/category-modal-edit\";\nimport ConfirmModalDelete from \"~/components/confirm-modal-delete\";\nimport DashHeader from \"~/components/dash-header\";\nimport Toast from \"~/components/toast\";\nimport { Category, countAllCategoriesByUser, createCategory, deleteCategory, getAllCategoriesByUser, updateCategory } from \"~/db/category.server\";\n\ntype IntentType = \"create\" | \"edit\" | \"delete\";\n\nexport async function loader({ request }: LoaderArgs) {\n    const { userId } = await getAuth(request);\n    \n    if(!userId) {\n        return redirect(\"/sign-up\");\n    }\n\n    const [total, categories] = await Promise.all([ countAllCategoriesByUser(userId), getAllCategoriesByUser({ userId, perPage: 1 }) ]);\n    return json({ total, categories });\n}\n\nexport async function action({ request }: ActionArgs) {\n    const { userId } = await getAuth(request);\n\n    if(!userId) {\n        return redirect(\"/sign-up\");\n    }\n\n    const formData = await request.formData();\n    const intent = formData.get(\"intent\") as IntentType; \n    \n    if(intent === \"create\") {\n        const name = formData.get(\"name\") as string;\n        const category = await createCategory({ userId, name });\n        return json({ intent, category });\n    } else if(intent === \"edit\") {\n        const name = formData.get(\"name\") as string;\n        const entityId = formData.get(\"entityId\") as string;\n        const category = await updateCategory({ entityId, userId, name });\n        return json({ intent, category });\n    } else if(intent === \"delete\") {\n        const entityId = formData.get(\"entityId\") as string;\n        await deleteCategory(entityId);\n    }\n    \n    return json({ intent });\n}\n\nexport default function DashboardCategoryRoute() {\n\n    const { total, categories } = useLoaderData();\n    const data = useActionData();\n    const { state } = useTransition();\n    const isSubmiting = state === \"submitting\";\n    \n    const [showCreateModal, setShowCreateModal] = useState<boolean>(false);\n    const [message, setMessage] = useState<string | null>();\n    const [categoryEdit, setCategoryEdit] = useState<Category | null>(null);\n    const [categoryDelelteId, setCategoryDeleteId] = useState<string | null>(null);\n\n    console.log(total);\n\n    useEffect(() => {\n        if(data?.intent === \"create\" && data?.category) {\n            setShowCreateModal(false);\n            setMessage(\"Create success\");\n        } else if(data?.intent === \"edit\" && data?.category) {\n            setCategoryEdit(null);\n            setMessage(\"Update success\");\n        } else if(data?.intent === \"delete\") {\n            setCategoryDeleteId(null);\n            setMessage(\"Delete success\");\n        }\n    }, [data]);\n\n    return (\n        <div>\n            <DashHeader title=\"Categories\" />\n            <div className=\"mt-4\">\n                <button type=\"button\" onClick={() => setShowCreateModal(true)} className=\"text-sm font-bold underline\"> + New category </button>\n            </div>\n            <CategoryList categories={categories} onSelect={setCategoryEdit} onDelete={setCategoryDeleteId} />\n            {\n                showCreateModal ? (<CategoryModalCreate isSubmiting={isSubmiting} onClose={() => setShowCreateModal(false)} />) : null\n            }\n            {\n                categoryEdit ? (<CategoryModalEdit isSubmiting={isSubmiting} onClose={() => setCategoryEdit(null)} category={categoryEdit} />) : null\n            }\n            {\n                categoryDelelteId ? (<ConfirmModalDelete entityId={categoryDelelteId} isSubmiting={isSubmiting} onClose={() => setCategoryDeleteId(null)} message=\"Are your sure delete this category?\" />) : null\n            }\n            {\n                message ? <Toast message={message} onClose={() => setMessage(null)} /> : null\n            }\n        </div>\n    );\n}", "import { Category } from \"~/db/category.server\"\nimport CategoryItem from \"./category-item\";\n\ntype Props = {\n    categories: Category[];\n    onSelect: (category: Category) => void;\n    onDelete: (entityId: string) => void;\n}\n\nexport default function CategoryList({ categories, onSelect, onDelete }: Props) {\n   return (\n        <div className=\"overflow-x-auto relative mt-6\">\n            <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n                <thead className=\"text-xs text-gray-700 uppercase bg-gray-50\">\n                    <tr>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Name\n                        </th>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Slug\n                        </th>\n                        <th scope=\"col\" className=\"py-3 px-6\">\n                            Actions\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {categories.map(category => <CategoryItem category={category} key={category.entityId} onSelect={onSelect} onDelete={onDelete} />)}\n                </tbody>\n            </table>\n        </div>\n   );\n}", "import { Category } from \"~/db/category.server\"\n\ntype Props = {\n    category: Category;\n    onSelect: (category: Category) => void;\n    onDelete: (entityId: string) => void;\n}\n\nexport default function CategoryItem({ category, onSelect, onDelete }: Props) {\n    const { entityId, name, slug } = category;\n    return (\n        <tr className=\"bg-white border-b\">\n            <th scope=\"row\" className=\"py-4 px-6 font-medium text-gray-900 whitespace-nowrap\">\n                { name }\n            </th>\n            <td className=\"py-4 px-6\">\n                { slug }\n            </td>\n            <td className=\"py-4 px-6\">\n                <button onClick={() => onSelect(category)}>Edit</button>\n                <button onClick={() => onDelete(entityId)}>Delete</button>\n            </td>\n        </tr>\n    );\n}", "import { Form } from \"@remix-run/react\";\nimport { Modal } from \"./modal\";\n\ntype Props = {\n    isSubmiting: boolean;\n    onClose: Function;\n}\n\nexport default function CategoryModalCreate({ isSubmiting, onClose }: Props) {\n    return (\n        <Modal onClose={onClose}>\n            <Form method=\"post\" className=\"md:w-96\">\n                <div>\n                    <label htmlFor=\"name\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Name</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  block w-full p-2.5\" required />\n                </div>\n                <div className=\"flex justify-end gap-2 mt-5\">\n                    <button type=\"button\" disabled={isSubmiting} onClick={() => onClose()} className=\"text-gray-900 border-2 border-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center mr-2 mb-2 hover:opacity-80 disabled:opacity-50\">Cancel</button>\n                    <button type=\"submit\" disabled={isSubmiting} name=\"intent\" value=\"create\" className=\"text-white border-2 border-gray-800 bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 disabled:opacity-50\">\n                        Save {isSubmiting ? \"...\" : \"\"}\n                    </button>\n                </div>\n            </Form>\n        </Modal>\n    );\n}", "type Props = {\n    children?: JSX.Element;\n    onClose: Function;\n}\n\nexport function Modal({ children, onClose }: Props) {\n    return (\n        <div id=\"modal\" aria-hidden=\"true\" className=\" bg-white bg-opacity-80 flex justify-center items-center overflow-y-auto overflow-x-hidden fixed top-0 right-0 bottom-0 left-0 z-10 w-full md:inset-0 h-modal md:h-full\">\n            <div className=\"max-w-2xl m-8 relative inline-flex items-center justify-center p-1 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-black\">\n                <div className=\"relative p-8 transition-all ease-in duration-75 bg-white rounded-md\">\n                    <div className=\"mb-4 flex justify-between\">\n                        <h3 className=\"font-bold text-xl\">Tip Land</h3>\n                        <button type=\"button\" onClick={() => onClose()}>\n                            <img src=\"/images/close.png\" width=\"20\" />\n                        </button>\n                    </div>\n                    <div>\n                        { children }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}", "import { Form } from \"@remix-run/react\";\nimport { Category } from \"~/db/category.server\";\nimport { Modal } from \"./modal\";\n\ntype Props = {\n    category: Category;\n    isSubmiting: boolean;\n    onClose: Function;\n}\n\nexport default function CategoryModalEdit({ category, isSubmiting, onClose }: Props) {\n    const { entityId, name } = category;\n    return (\n        <Modal onClose={onClose}>\n            <Form method=\"post\" className=\"md:w-96\">\n                <input type=\"hidden\" name=\"entityId\" value={entityId} />\n                <div>\n                    <label htmlFor=\"name\" className=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Name</label>\n                    <input type=\"text\" id=\"name\" defaultValue={name} name=\"name\" className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg  block w-full p-2.5\" required />\n                </div>\n                <div className=\"flex justify-end gap-2 mt-5\">\n                    <button type=\"button\" disabled={isSubmiting} onClick={() => onClose()} className=\"text-gray-900 border-2 border-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center mr-2 mb-2 hover:opacity-80 disabled:opacity-50\">Cancel</button>\n                    <button type=\"submit\" disabled={isSubmiting} name=\"intent\" value=\"edit\" className=\"text-white border-2 border-gray-800 bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 disabled:opacity-50\">\n                        Save {isSubmiting ? \"...\" : \"\"}\n                    </button>\n                </div>\n            </Form>\n        </Modal>\n    );\n}", "import { Form } from \"@remix-run/react\";\nimport { Modal } from \"./modal\";\n\ntype Props = {\n    entityId: string;\n    isSubmiting: boolean;\n    message: string;\n    onClose: Function;\n}\n\n\nexport default function ConfirmModalDelete({ entityId, isSubmiting, message, onClose}: Props) {\n    return (\n        <Modal onClose={onClose}>\n            <Form method=\"post\" className=\"md:w-96\">\n                <input type=\"hidden\" name=\"entityId\" value={entityId} />\n                <p>{message}</p>\n                <div className=\"flex justify-end gap-2 mt-5\">\n                    <button type=\"button\" disabled={isSubmiting} onClick={() => onClose()} className=\"text-gray-900 border-2 border-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-3 py-1.5 text-center mr-2 mb-2 hover:opacity-80 disabled:opacity-50\">Cancel</button>\n                    <button type=\"submit\" disabled={isSubmiting} name=\"intent\" value=\"delete\" className=\"text-white border-2 border-gray-800 bg-gray-900 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 disabled:opacity-50\">\n                        Delete {isSubmiting ? \"...\" : \"\"}\n                    </button>\n                </div>\n            </Form>\n        </Modal>\n    );\n}", "import { useEffect } from \"react\";\n\ntype Props = {\n    message: string;\n    onClose: Function;\n    delay?: boolean;\n}\n\nexport default function Toast({ message, onClose, delay = true } : Props) {\n\n    useEffect(() => {\n        if(delay) {\n            setTimeout(onClose, 2500);\n        }\n    }, []);\n\n    return (\n        <div id=\"toast\" className=\"fixed right-4 bottom-5\">\n            <div className=\"flex items-center p-4 mb-4 w-full max-w-xs rounded-lg shadow text-white bg-black gap-3\" role=\"alert\">\n                <div className=\"ml-3 text-sm font-normal\">{message}</div>\n                <button type=\"button\" onClick={() => onClose()} className=\"ml-auto -mx-1.5 -my-1.5 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 inline-flex h-8 w-8 text-gray-500 hover:text-white bg-gray-100 hover:bg-gray-200\" data-dismiss-target=\"#toast\" aria-label=\"Close\">\n                    <span className=\"sr-only\">Close</span>\n                    <svg aria-hidden=\"true\" className=\"w-5 h-5\" fill=\"#000\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path></svg>\n                </button>\n            </div>\n        </div>\n    );\n}"],
  "mappings": "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",
  "names": []
}
